From 5ca00f06007eb7385138fc6569eb8c642dcf1857 Mon Sep 17 00:00:00 2001
From: Hendrik <git@h3ndrk.de>
Date: Thu, 3 Jun 2021 12:55:47 +0200
Subject: [PATCH] Merge cmake_rewrite of github.com/Be-ing/portaudio.git

---
 .github/asiosdk-version.txt                   |   5 +
 .github/workflows/cmake.yml                   |  64 +-
 CMakeLists.txt                                | 786 +++++++-----------
 cmake/FindASIO.cmake                          |  85 ++
 cmake/FindJACK.cmake                          |  70 ++
 .../cmake_uninstall.cmake.in                  |   0
 {cmake_support => cmake}/portaudio-2.0.pc.in  |   0
 .../portaudioConfig.cmake.in                  |   0
 .../toolchains/i686-w64-mingw32.cmake         |   2 +-
 cmake_support/FindASIOSDK.cmake               |  41 -
 cmake_support/FindJack.cmake                  |  41 -
 cmake_support/options_cmake.h.in              |  31 -
 cmake_support/template_portaudio.def          |  62 --
 examples/CMakeLists.txt                       |  72 +-
 qa/CMakeLists.txt                             |   8 +-
 qa/loopback/CMakeLists.txt                    |   6 +-
 test/CMakeLists.txt                           | 104 +--
 17 files changed, 630 insertions(+), 747 deletions(-)
 create mode 100644 .github/asiosdk-version.txt
 create mode 100644 cmake/FindASIO.cmake
 create mode 100644 cmake/FindJACK.cmake
 rename {cmake_support => cmake}/cmake_uninstall.cmake.in (100%)
 rename {cmake_support => cmake}/portaudio-2.0.pc.in (100%)
 rename {cmake_support => cmake}/portaudioConfig.cmake.in (100%)
 rename i686-w64-mingw32.cmake => cmake/toolchains/i686-w64-mingw32.cmake (89%)
 delete mode 100644 cmake_support/FindASIOSDK.cmake
 delete mode 100644 cmake_support/FindJack.cmake
 delete mode 100644 cmake_support/options_cmake.h.in
 delete mode 100644 cmake_support/template_portaudio.def

diff --git a/.github/asiosdk-version.txt b/.github/asiosdk-version.txt
new file mode 100644
index 0000000..31c8146
--- /dev/null
+++ b/.github/asiosdk-version.txt
@@ -0,0 +1,5 @@
+GitHub Actions uses the hash of this file as the cache key for the ASIO SDK.
+Update this file when a new version of the ASIO SDK is released to trigger
+a new download on GitHub Actions instead of using the old cache.
+
+asiosdk_2.3.3_2019-06-14.zip
diff --git a/.github/workflows/cmake.yml b/.github/workflows/cmake.yml
index 68e4b6c..ca82ce7 100644
--- a/.github/workflows/cmake.yml
+++ b/.github/workflows/cmake.yml
@@ -12,20 +12,54 @@ jobs:
       fail-fast: false
       matrix:
         include:
-          - name: Ubuntu
+          - name: Ubuntu GCC
             os: ubuntu-latest
             install_dir: ~/portaudio
-          - name: Ubuntu mingw64
+            cmake_generator: "Unix Makefiles"
+            cmake_options:
+              -DOSS=ON
+          - name: Ubuntu MinGW
             os: ubuntu-latest
             install_dir: ~/portaudio
+            asio_sdk_cache_path: asiosdk.zip
             dependencies_extras: mingw-w64
-            cmake_extras: -DCMAKE_TOOLCHAIN_FILE=i686-w64-mingw32.cmake
-          - name: Windows
+            cmake_generator: "Unix Makefiles"
+            cmake_options:
+              -DASIO=ON
+              -DASIO_SDK_ZIP_PATH=asiosdk.zip
+              -DCMAKE_TOOLCHAIN_FILE=cmake/toolchains/i686-w64-mingw32.cmake
+          - name: Windows MSVC
             os: windows-latest
             install_dir: C:\portaudio
-          - name: macOS
+            cmake_generator: "Visual Studio 16 2019"
+            # ASIO_SDK_ZIP_PATH needs to be quoted or CMake will save the download to
+            # asiosdk instead of asiosdk.zip.
+            asio_sdk_cache_path: "asiosdk.zip"
+            cmake_options:
+              -DASIO=ON
+              -DASIO_SDK_ZIP_PATH="asiosdk.zip"
+          - name: Windows MinGW
+            os: windows-latest
+            install_dir: C:\portaudio
+            cmake_generator: "MinGW Makefiles"
+            # ASIO_SDK_ZIP_PATH needs to be quoted or CMake will save the download to
+            # asiosdk instead of asiosdk.zip.
+            asio_sdk_cache_path: "asiosdk.zip"
+            cmake_options:
+              -DASIO=ON
+              -DASIO_SDK_ZIP_PATH="asiosdk.zip"
+          - name: macOS Clang
             os: macOS-latest
             install_dir: ~/portaudio
+            cmake_generator: "Unix Makefiles"
+            cmake_options:
+              -DCMAKE_FRAMEWORK=OFF
+          - name: macOS Clang framework
+            os: macOS-latest
+            install_dir: ~/portaudio
+            cmake_generator: "Unix Makefiles"
+            cmake_options:
+              -DCMAKE_FRAMEWORK=ON
 
     runs-on: ${{ matrix.os }}
     name: ${{ matrix.name }}
@@ -37,12 +71,26 @@ jobs:
     - name: "[Ubuntu] install dependencies"
       run: sudo apt-get install libasound2-dev libjack-dev ${{ matrix.dependencies_extras }}
       if: matrix.os == 'ubuntu-latest'
+    - name: "[macOS] install dependencies"
+      run: brew install jack
+      if: matrix.os == 'macOS-latest'
+    - name: "[Windows MinGW] install dependencies"
+      run: choco install mingw
+      if: startsWith(matrix.os, 'Windows MinGW')
+    - name: "[Windows/MinGW] set up ASIO SDK cache"
+      uses: actions/cache@v2
+      if: matrix.asio_sdk_cache_path != null
+      with:
+        path: ${{ matrix.asio_sdk_cache_path }}
+        key: ${{ hashFiles('.github/asiosdk-version.txt') }}
     - name: configure
-      run: cmake ${{ matrix.cmake_extras }}
+      run: cmake
+           -G "${{ matrix.cmake_generator }}"
+           ${{ matrix.cmake_options }}
            -DCMAKE_INSTALL_PREFIX=${{ matrix.install_dir }}
            -DCMAKE_BUILD_TYPE=${{ env.cmake_build_type }}
-           -DPA_BUILD_TESTS=ON
-           -DPA_BUILD_EXAMPLES=ON
+           -DBUILD_TESTING=ON
+           -DBUILD_EXAMPLES=ON
            -S .
            -B build
     - name: build
diff --git a/CMakeLists.txt b/CMakeLists.txt
index f342252..e4c50f1 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,98 +1,13 @@
-# $Id: $
+cmake_minimum_required(VERSION 3.4.0)
+project(portaudio VERSION 19.8)
+
 #
-# For a "How-To" please refer to the Portaudio documentation at:
-# http://www.portaudio.com/trac/wiki/TutorialDir/Compile/CMake
+# General PortAudio stuff
 #
 
-CMAKE_MINIMUM_REQUIRED(VERSION 3.0.0)
-
-# Check if the user is building PortAudio stand-alone or as part of a larger
-# project. If this is part of a larger project (i.e. the CMakeLists.txt has
-# been imported by some other CMakeLists.txt), we don't want to trump over
-# the top of that project's global settings.
-IF(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_CURRENT_LIST_DIR})
-  PROJECT(portaudio)
-
-  # CMAKE_CONFIGURATION_TYPES only exists for multi-config generators (like
-  # Visual Studio or Xcode). For these projects, we won't define
-  # CMAKE_BUILD_TYPE as it does not make sense.
-  IF(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
-    MESSAGE(STATUS "Setting CMAKE_BUILD_TYPE type to 'Debug' as none was specified.")
-    SET(CMAKE_BUILD_TYPE Debug CACHE STRING "Choose the type of build." FORCE)
-    SET_PROPERTY(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug" "Release")
-  ENDIF()
-
-  SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)
-
-  IF(WIN32 AND MSVC)
-    OPTION(PA_DLL_LINK_WITH_STATIC_RUNTIME "Link with static runtime libraries (minimizes runtime dependencies)" ON)
-    IF(PA_DLL_LINK_WITH_STATIC_RUNTIME)
-      FOREACH(flag_var
-        CMAKE_C_FLAGS CMAKE_C_FLAGS_DEBUG CMAKE_C_FLAGS_RELEASE
-        CMAKE_C_FLAGS_MINSIZEREL CMAKE_C_FLAGS_RELWITHDEBINFO
-        CMAKE_CXX_FLAGS CMAKE_CXX_FLAGS_DEBUG CMAKE_CXX_FLAGS_RELEASE
-        CMAKE_CXX_FLAGS_MINSIZEREL CMAKE_CXX_FLAGS_RELWITHDEBINFO)
-        IF(${flag_var} MATCHES "/MD")
-          STRING(REGEX REPLACE "/MD" "/MT" ${flag_var} "${${flag_var}}")
-        ENDIF()
-      ENDFOREACH()
-    ENDIF()
-  ENDIF()
-ENDIF()
-
-SET(PA_VERSION 19)
-SET(PA_PKGCONFIG_VERSION ${PA_VERSION})
-SET(PA_SOVERSION "${PA_VERSION}.0")
-
-# Most of the code from this point onwards is related to populating the
-# following variables:
-#   PA_PUBLIC_INCLUDES - This contains the list of public PortAudio header
-#       files. These files will be copied into /include paths on Unix'y
-#       systems when "make install" is invoked.
-#   PA_PRIVATE_INCLUDES - This contains the list of header files which
-#       are not part of PortAudio, but are required by the various hostapis.
-#       It is only used by CMake IDE generators (like Visual Studio) to
-#       provide quick-links to useful headers. It has no impact on build
-#       output.
-#   PA_PRIVATE_INCLUDE_PATHS - This contains the list of include paths which
-#       will be passed to the compiler while PortAudio is being built which
-#       are not required by applications using the PortAudio API.
-#   PA_PRIVATE_COMPILE_DEFINITIONS - This contains a list of preprocessor
-#       macro definitions which will be set when compiling PortAudio source
-#       files.
-#   PA_SOURCES - This contains the list of source files which will be built
-#       into the static and shared PortAudio libraries.
-#   PA_NON_UNICODE_SOURCES - This also contains a list of source files which
-#       will be build into the static and shared PortAudio libraries. However,
-#       these sources will not have any unicode compiler definitions added
-#       to them. This list should only contain external source dependencies.
-#   PA_EXTRA_SHARED_SOURCES - Contains a list of extra files which will be
-#       associated only with the shared PortAudio library. This only seems
-#       relevant for Windows shared libraries which require a list of export
-#       symbols.
-# Where other PA_* variables are set, these are almost always only used to
-# preserve the historic SOURCE_GROUP behavior (which again only has an impact
-# on IDE-style generators for visual appearance) or store the output of
-# find_library() calls.
-
-SET(PA_COMMON_INCLUDES
-  src/common/pa_allocation.h
-  src/common/pa_converters.h
-  src/common/pa_cpuload.h
-  src/common/pa_debugprint.h
-  src/common/pa_dither.h
-  src/common/pa_endianness.h
-  src/common/pa_hostapi.h
-  src/common/pa_memorybarrier.h
-  src/common/pa_process.h
-  src/common/pa_ringbuffer.h
-  src/common/pa_stream.h
-  src/common/pa_trace.h
-  src/common/pa_types.h
-  src/common/pa_util.h
-)
+option(BUILD_SHARED_LIBS "Build dynamic library" ON)
 
-SET(PA_COMMON_SOURCES
+add_library(portaudio
   src/common/pa_allocation.c
   src/common/pa_converters.c
   src/common/pa_cpuload.c
@@ -103,396 +18,331 @@ SET(PA_COMMON_SOURCES
   src/common/pa_ringbuffer.c
   src/common/pa_stream.c
   src/common/pa_trace.c
+  src/hostapi/skeleton/pa_hostapi_skeleton.c
 )
+target_include_directories(portaudio PRIVATE src/common)
+target_include_directories(portaudio PUBLIC
+  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
+  $<INSTALL_INTERFACE:include>)
+set(PORTAUDIO_PUBLIC_HEADERS include/portaudio.h)
 
-SOURCE_GROUP("common" FILES ${PA_COMMON_INCLUDES} ${PA_COMMON_SOURCES})
-
-SET(PA_PUBLIC_INCLUDES include/portaudio.h)
+find_package(Threads REQUIRED)
+target_link_libraries(portaudio Threads::Threads)
 
-SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cmake_support)
+option(DEBUG_OUTPUT "Enable debug output for Portaudio" OFF)
+if(DEBUG_OUTPUT)
+  target_compile_definitions(portaudio PRIVATE PA_ENABLE_DEBUG_OUTPUT)
+endif()
 
-SET(PA_SKELETON_SOURCES src/hostapi/skeleton/pa_hostapi_skeleton.c)
-SOURCE_GROUP("hostapi\\skeleton" ${PA_SKELETON_SOURCES})
-SET(PA_SOURCES ${PA_COMMON_SOURCES} ${PA_SKELETON_SOURCES})
-SET(PA_PRIVATE_INCLUDE_PATHS src/common ${CMAKE_CURRENT_BINARY_DIR})
+include(TestBigEndian)
+TEST_BIG_ENDIAN(IS_BIG_ENDIAN)
+if(IS_BIG_ENDIAN)
+  target_compile_definitions(portaudio PRIVATE PA_BIG_ENDIAN)
+else()
+  target_compile_definitions(portaudio PRIVATE PA_LITTLE_ENDIAN)
+endif()
+
+if(WIN32 AND MSVC AND BUILD_SHARED_LIBS
+  # Check if the user is building PortAudio stand-alone or as part of a larger
+  # project. If this is part of a larger project (i.e. the CMakeLists.txt has
+  # been imported by some other CMakeLists.txt), we don't want to override
+  # that project's global settings.
+  AND "${CMAKE_SOURCE_DIR}" STREQUAL "${CMAKE_CURRENT_LIST_DIR}")
+  option(DLL_LINK_WITH_STATIC_RUNTIME
+    "Link with static runtime libraries (minimizes runtime dependencies)" ON)
+  if(DLL_LINK_WITH_STATIC_RUNTIME)
+    foreach(flag_var
+      CMAKE_C_FLAGS CMAKE_C_FLAGS_DEBUG CMAKE_C_FLAGS_RELEASE
+      CMAKE_C_FLAGS_MINSIZEREL CMAKE_C_FLAGS_RELWITHDEBINFO
+      CMAKE_CXX_FLAGS CMAKE_CXX_FLAGS_DEBUG CMAKE_CXX_FLAGS_RELEASE
+      CMAKE_CXX_FLAGS_MINSIZEREL CMAKE_CXX_FLAGS_RELWITHDEBINFO)
+      if(${flag_var} MATCHES "/MD")
+        string(REGEX REPLACE "/MD" "/MT" ${flag_var} "${${flag_var}}")
+      endif()
+    endforeach()
+  endif()
+endif()
 
-IF(WIN32)
-  SET(PA_PRIVATE_COMPILE_DEFINITIONS ${PA_PRIVATE_COMPILE_DEFINITIONS} _CRT_SECURE_NO_WARNINGS)
+#
+# Host APIs
+#
 
-  SET(PA_PLATFORM_SOURCES
+option(SKELETON "Use skeleton host API" OFF)
+if(SKELETON)
+  target_compile_definitions(portaudio PRIVATE PA_USE_SKELETON=1)
+endif()
+
+include(CMakeDependentOption)
+set(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH}" "${CMAKE_CURRENT_SOURCE_DIR}/cmake")
+
+find_package(JACK)
+cmake_dependent_option(JACK "Enable support for JACK Audio Connection Kit" ON JACK_FOUND OFF)
+if(JACK)
+  target_link_libraries(portaudio JACK::jack)
+  target_sources(portaudio PRIVATE src/hostapi/jack/pa_jack.c)
+  set(PORTAUDIO_PUBLIC_HEADERS "${PORTAUDIO_PUBLIC_HEADERS}" include/pa_jack.h)
+  target_compile_definitions(portaudio PRIVATE PA_USE_JACK=1)
+endif()
+
+if(WIN32)
+  target_sources(portaudio PRIVATE
     src/os/win/pa_win_hostapis.c
     src/os/win/pa_win_util.c
     src/os/win/pa_win_waveformat.c
-    src/os/win/pa_win_wdmks_utils.c
-    src/os/win/pa_win_coinitialize.c)
-  SET(PA_PLATFORM_INCLUDES
-    src/os/win/pa_win_coinitialize.h
-    src/os/win/pa_win_wdmks_utils.h)
-
-  IF(MSVC)
-    SET(PA_PLATFORM_SOURCES ${PA_PLATFORM_SOURCES} src/os/win/pa_x86_plain_converters.c)
-    SET(PA_PLATFORM_INCLUDES ${PA_PLATFORM_INCLUDES} src/os/win/pa_x86_plain_converters.h)
-  ELSE()
-    SET(PA_PRIVATE_COMPILE_DEFINITIONS ${PA_PRIVATE_COMPILE_DEFINITIONS} _WIN32_WINNT=0x0501 WINVER=0x0501)
-    SET(DEF_EXCLUDE_X86_PLAIN_CONVERTERS ";")
-  ENDIF()
-
-  SOURCE_GROUP("os\\win" FILES ${PA_PLATFORM_SOURCES} ${PA_PLATFORM_INCLUDES})
-  SET(PA_SOURCES ${PA_SOURCES} ${PA_PLATFORM_SOURCES})
-  SET(PA_PRIVATE_INCLUDES ${PA_PRIVATE_INCLUDES} ${PA_PLATFORM_INCLUDES})
-  SET(PA_PRIVATE_INCLUDE_PATHS ${PA_PRIVATE_INCLUDE_PATHS} src/os/win)
-
-  SET(PA_LIBRARY_DEPENDENCIES ${PA_LIBRARY_DEPENDENCIES} winmm)
-
-  # Try to find ASIO SDK (assumes that portaudio and asiosdk folders are side-by-side, see
-  # http://www.portaudio.com/trac/wiki/TutorialDir/Compile/WindowsASIOMSVC)
-  FIND_PACKAGE(ASIOSDK)
-  IF(ASIOSDK_FOUND)
-    OPTION(PA_USE_ASIO "Enable support for ASIO" ON)
-  ELSE()
-    OPTION(PA_USE_ASIO "Enable support for ASIO" OFF)
-  ENDIF()
-  IF(PA_USE_ASIO)
-    SET(PA_PRIVATE_INCLUDE_PATHS ${PA_PRIVATE_INCLUDE_PATHS} ${ASIOSDK_ROOT_DIR}/common)
-    SET(PA_PRIVATE_INCLUDE_PATHS ${PA_PRIVATE_INCLUDE_PATHS} ${ASIOSDK_ROOT_DIR}/host)
-    SET(PA_PRIVATE_INCLUDE_PATHS ${PA_PRIVATE_INCLUDE_PATHS} ${ASIOSDK_ROOT_DIR}/host/pc)
-    SET(PA_ASIO_SOURCES src/hostapi/asio/pa_asio.cpp src/hostapi/asio/iasiothiscallresolver.cpp)
-    SET(PA_ASIOSDK_SOURCES ${ASIOSDK_ROOT_DIR}/common/asio.cpp ${ASIOSDK_ROOT_DIR}/host/pc/asiolist.cpp ${ASIOSDK_ROOT_DIR}/host/asiodrivers.cpp)
-    SOURCE_GROUP("hostapi\\ASIO" FILES ${PA_ASIO_SOURCES})
-    SOURCE_GROUP("hostapi\\ASIO\\ASIOSDK" FILES ${PA_ASIOSDK_SOURCES})
-    SET(PA_PUBLIC_INCLUDES ${PA_PUBLIC_INCLUDES} include/pa_asio.h)
-    SET(PA_SOURCES ${PA_SOURCES} ${PA_ASIO_SOURCES})
-    SET(PA_NON_UNICODE_SOURCES ${PA_NON_UNICODE_SOURCES} ${PA_ASIOSDK_SOURCES})
-    SET(PA_LIBRARY_DEPENDENCIES ${PA_LIBRARY_DEPENDENCIES} ole32 uuid)
-  ELSE()
-    # Set variables for DEF file expansion
-    SET(DEF_EXCLUDE_ASIO_SYMBOLS ";")
-  ENDIF()
-
-  OPTION(PA_USE_DS "Enable support for DirectSound" ON)
-  IF(PA_USE_DS)
-    IF(MINGW)
-      MESSAGE(STATUS "DirectSound support will be built with DSound provided by MinGW.")
-      OPTION(PA_USE_DIRECTSOUNDFULLDUPLEXCREATE "Use DirectSound full duplex create" OFF)
-    ELSE(MINGW)
-      OPTION(PA_USE_DIRECTSOUNDFULLDUPLEXCREATE "Use DirectSound full duplex create" ON)
-    ENDIF(MINGW)
-    MARK_AS_ADVANCED(PA_USE_DIRECTSOUNDFULLDUPLEXCREATE)
-    IF(PA_USE_DIRECTSOUNDFULLDUPLEXCREATE)
-      SET(PA_PRIVATE_COMPILE_DEFINITIONS ${PA_PRIVATE_COMPILE_DEFINITIONS} PAWIN_USE_DIRECTSOUNDFULLDUPLEXCREATE)
-    ENDIF()
-    SET(PA_DS_INCLUDES src/hostapi/dsound/pa_win_ds_dynlink.h)
-    SET(PA_DS_SOURCES src/hostapi/dsound/pa_win_ds.c src/hostapi/dsound/pa_win_ds_dynlink.c)
-    SOURCE_GROUP("hostapi\\dsound" FILES ${PA_DS_INCLUDES} ${PA_DS_SOURCES})
-    SET(PA_PUBLIC_INCLUDES ${PA_PUBLIC_INCLUDES} include/pa_win_ds.h include/pa_win_waveformat.h)
-    SET(PA_PRIVATE_INCLUDES ${PA_PRIVATE_INCLUDES} ${PA_DS_INCLUDES})
-    SET(PA_SOURCES ${PA_SOURCES} ${PA_DS_SOURCES})
-    SET(PA_LIBRARY_DEPENDENCIES ${PA_LIBRARY_DEPENDENCIES} dsound)
-  ENDIF(PA_USE_DS)
-
-  OPTION(PA_USE_WMME "Enable support for MME" ON)
-  IF(PA_USE_WMME)
-    SET(PA_WMME_SOURCES src/hostapi/wmme/pa_win_wmme.c)
-    SOURCE_GROUP("hostapi\\wmme" FILES ${PA_WMME_SOURCES})
-    SET(PA_PUBLIC_INCLUDES ${PA_PUBLIC_INCLUDES} include/pa_win_wmme.h include/pa_win_waveformat.h)
-    SET(PA_SOURCES ${PA_SOURCES} ${PA_WMME_SOURCES})
-    SET(PA_LIBRARY_DEPENDENCIES ${PA_LIBRARY_DEPENDENCIES} ole32 uuid)
-  ENDIF()
-
-  # MinGW versions below 4.93, especially non MinGW-w64 distributions may
-  # break in the wasapi build. If an older MinGW version is required, WASAPI-
-  # support needs to be disabled.
-  OPTION(PA_USE_WASAPI "Enable support for WASAPI" ON)
-  IF(PA_USE_WASAPI)
-    SET(PA_WASAPI_SOURCES src/hostapi/wasapi/pa_win_wasapi.c)
-    SOURCE_GROUP("hostapi\\wasapi" FILES ${PA_WASAPI_SOURCES})
-    SET(PA_PUBLIC_INCLUDES ${PA_PUBLIC_INCLUDES} include/pa_win_wasapi.h include/pa_win_waveformat.h)
-    SET(PA_SOURCES ${PA_SOURCES} ${PA_WASAPI_SOURCES})
-    SET(PA_LIBRARY_DEPENDENCIES ${PA_LIBRARY_DEPENDENCIES} ole32 uuid)
-  ELSE()
-    SET(DEF_EXCLUDE_WASAPI_SYMBOLS ";")
-  ENDIF()
-
-  OPTION(PA_USE_WDMKS "Enable support for WDMKS" ON)
-  IF(PA_USE_WDMKS)
-    SET(PA_WDMKS_SOURCES src/hostapi/wdmks/pa_win_wdmks.c)
-    SOURCE_GROUP("hostapi\\wdmks" FILES ${PA_WDMKS_SOURCES})
-    SET(PA_PUBLIC_INCLUDES ${PA_PUBLIC_INCLUDES} include/pa_win_wdmks.h)
-    SET(PA_SOURCES ${PA_SOURCES} ${PA_WDMKS_SOURCES})
-    SET(PA_LIBRARY_DEPENDENCIES ${PA_LIBRARY_DEPENDENCIES} setupapi ole32 uuid)
-  ENDIF()
-
-  OPTION(PA_USE_WDMKS_DEVICE_INFO "Use WDM/KS API for device info" ON)
-  MARK_AS_ADVANCED(PA_USE_WDMKS_DEVICE_INFO)
-  IF(PA_USE_WDMKS_DEVICE_INFO)
-    SET(PA_PRIVATE_COMPILE_DEFINITIONS ${PA_PRIVATE_COMPILE_DEFINITIONS} PAWIN_USE_WDMKS_DEVICE_INFO)
-  ENDIF()
-
-  SET(GENERATED_MESSAGE "CMake generated file, do NOT edit! Use CMake-GUI to change configuration instead.")
-  CONFIGURE_FILE(cmake_support/template_portaudio.def ${CMAKE_CURRENT_BINARY_DIR}/portaudio_cmake.def @ONLY)
-  CONFIGURE_FILE(cmake_support/options_cmake.h.in ${CMAKE_CURRENT_BINARY_DIR}/options_cmake.h @ONLY)
-  SET(PA_PRIVATE_INCLUDES ${PA_PRIVATE_INCLUDES} ${CMAKE_CURRENT_BINARY_DIR}/options_cmake.h)
-  SET(PA_PRIVATE_COMPILE_DEFINITIONS ${PA_PRIVATE_COMPILE_DEFINITIONS} PORTAUDIO_CMAKE_GENERATED)
-  SOURCE_GROUP("cmake_generated" FILES ${CMAKE_CURRENT_BINARY_DIR}/portaudio_cmake.def ${CMAKE_CURRENT_BINARY_DIR}/options_cmake.h)
-
-  SET(PA_EXTRA_SHARED_SOURCES ${CMAKE_CURRENT_BINARY_DIR}/portaudio_cmake.def)
-
-ELSE()
-
-  SET(PA_PRIVATE_INCLUDE_PATHS ${PA_PRIVATE_INCLUDE_PATHS} src/os/unix)
-  SET(PA_PLATFORM_SOURCES src/os/unix/pa_unix_hostapis.c src/os/unix/pa_unix_util.c)
-  SOURCE_GROUP("os\\unix" FILES ${PA_PLATFORM_SOURCES})
-  SET(PA_SOURCES ${PA_SOURCES} ${PA_PLATFORM_SOURCES})
-
-  IF(APPLE)
-
-    SET(CMAKE_MACOSX_RPATH 1)
-    OPTION(PA_USE_COREAUDIO "Enable support for CoreAudio" ON)
-    IF(PA_USE_COREAUDIO)
-      SET(PA_COREAUDIO_SOURCES
-        src/hostapi/coreaudio/pa_mac_core.c
-        src/hostapi/coreaudio/pa_mac_core_blocking.c
-        src/hostapi/coreaudio/pa_mac_core_utilities.c)
-      SET(PA_COREAUDIO_INCLUDES
-        src/hostapi/coreaudio/pa_mac_core_blocking.h
-        src/hostapi/coreaudio/pa_mac_core_utilities.h)
-      SOURCE_GROUP("hostapi\\coreaudio" FILES ${PA_COREAUDIO_SOURCES} ${PA_COREAUDIO_INCLUDES})
-      SET(PA_PUBLIC_INCLUDES ${PA_PUBLIC_INCLUDES} include/pa_mac_core.h)
-      SET(PA_PRIVATE_INCLUDES ${PA_PRIVATE_INCLUDES} ${PA_COREAUDIO_INCLUDES})
-      SET(PA_SOURCES ${PA_SOURCES} ${PA_COREAUDIO_SOURCES})
-
-      FIND_LIBRARY(COREAUDIO_LIBRARY CoreAudio REQUIRED)
-      FIND_LIBRARY(AUDIOTOOLBOX_LIBRARY AudioToolbox REQUIRED)
-      FIND_LIBRARY(AUDIOUNIT_LIBRARY AudioUnit REQUIRED)
-      FIND_LIBRARY(COREFOUNDATION_LIBRARY CoreFoundation REQUIRED)
-      FIND_LIBRARY(CORESERVICES_LIBRARY CoreServices REQUIRED)
-      MARK_AS_ADVANCED(COREAUDIO_LIBRARY AUDIOTOOLBOX_LIBRARY AUDIOUNIT_LIBRARY COREFOUNDATION_LIBRARY CORESERVICES_LIBRARY)
-      SET(PA_LIBRARY_DEPENDENCIES ${PA_LIBRARY_DEPENDENCIES} ${COREAUDIO_LIBRARY} ${AUDIOTOOLBOX_LIBRARY} ${AUDIOUNIT_LIBRARY} ${COREFOUNDATION_LIBRARY} ${CORESERVICES_LIBRARY})
-      SET(PA_PRIVATE_COMPILE_DEFINITIONS ${PA_PRIVATE_COMPILE_DEFINITIONS} PA_USE_COREAUDIO)
-      SET(PA_PKGCONFIG_LDFLAGS "${PA_PKGCONFIG_LDFLAGS} -framework CoreAudio -framework AudioToolbox -framework AudioUnit -framework CoreFoundation -framework CoreServices")
-    ENDIF()
-
-  ELSEIF(UNIX)
-
-    FIND_PACKAGE(Jack)
-    IF(JACK_FOUND)
-      OPTION(PA_USE_JACK "Enable support for Jack" ON)
-    ELSE()
-      OPTION(PA_USE_JACK "Enable support for Jack" OFF)
-    ENDIF()
-    IF(PA_USE_JACK)
-      SET(PA_PRIVATE_INCLUDE_PATHS ${PA_PRIVATE_INCLUDE_PATHS} ${JACK_INCLUDE_DIRS})
-      SET(PA_JACK_SOURCES src/hostapi/jack/pa_jack.c)
-      SOURCE_GROUP("hostapi\\JACK" FILES ${PA_JACK_SOURCES})
-      SET(PA_PUBLIC_INCLUDES ${PA_PUBLIC_INCLUDES} include/pa_jack.h)
-      SET(PA_SOURCES ${PA_SOURCES} ${PA_JACK_SOURCES})
-      SET(PA_PRIVATE_COMPILE_DEFINITIONS ${PA_PRIVATE_COMPILE_DEFINITIONS} PA_USE_JACK)
-      SET(PA_LIBRARY_DEPENDENCIES ${PA_LIBRARY_DEPENDENCIES} ${JACK_LIBRARIES})
-      SET(PA_PKGCONFIG_LDFLAGS "${PA_PKGCONFIG_LDFLAGS} -ljack")
-    ENDIF()
-
-    FIND_PACKAGE(ALSA)
-    IF(ALSA_FOUND)
-      OPTION(PA_USE_ALSA "Enable support for ALSA" ON)
-      OPTION(PA_ALSA_DYNAMIC "Enable loading ALSA through dlopen" OFF)
-    ELSE()
-      OPTION(PA_USE_ALSA "Enable support for ALSA" OFF)
-    ENDIF()
-    IF(PA_USE_ALSA)
-      SET(PA_PRIVATE_INCLUDE_PATHS ${PA_PRIVATE_INCLUDE_PATHS} ${ALSA_INCLUDE_DIRS})
-      SET(PA_ALSA_SOURCES src/hostapi/alsa/pa_linux_alsa.c)
-      SOURCE_GROUP("hostapi\\ALSA" FILES ${PA_ALSA_SOURCES})
-      SET(PA_PUBLIC_INCLUDES ${PA_PUBLIC_INCLUDES} include/pa_linux_alsa.h)
-      SET(PA_SOURCES ${PA_SOURCES} ${PA_ALSA_SOURCES})
-      SET(PA_PRIVATE_COMPILE_DEFINITIONS ${PA_PRIVATE_COMPILE_DEFINITIONS} PA_USE_ALSA)
-      IF(PA_ALSA_DYNAMIC)
-        SET(PA_PRIVATE_COMPILE_DEFINITIONS ${PA_PRIVATE_COMPILE_DEFINITIONS} PA_ALSA_DYNAMIC)
-        SET(PA_LIBRARY_DEPENDENCIES ${PA_LIBRARY_DEPENDENCIES} ${CMAKE_DL_LIBS})
-        SET(PA_PKGCONFIG_LDFLAGS "${PA_PKGCONFIG_LDFLAGS} -l${CMAKE_DL_LIBS}")
-      ELSE()
-        SET(PA_LIBRARY_DEPENDENCIES ${PA_LIBRARY_DEPENDENCIES} ${ALSA_LIBRARIES})
-        SET(PA_PKGCONFIG_LDFLAGS "${PA_PKGCONFIG_LDFLAGS} -lasound")
-      ENDIF()
-    ENDIF()
-
-  ENDIF()
-
-  SET(PA_PKGCONFIG_LDFLAGS "${PA_PKGCONFIG_LDFLAGS} -lm -lpthread")
-  SET(PA_LIBRARY_DEPENDENCIES ${PA_LIBRARY_DEPENDENCIES} m pthread)
-
-ENDIF()
-
-SOURCE_GROUP("include" FILES ${PA_PUBLIC_INCLUDES})
-
-SET(PA_INCLUDES ${PA_PRIVATE_INCLUDES} ${PA_PUBLIC_INCLUDES})
-
-IF(WIN32)
-  OPTION(PA_UNICODE_BUILD "Enable Portaudio Unicode build" ON)
-  IF(PA_UNICODE_BUILD)
-    SET_SOURCE_FILES_PROPERTIES(${PA_SOURCES} PROPERTIES COMPILE_DEFINITIONS "UNICODE;_UNICODE")
-  ENDIF()
-ENDIF()
-
-OPTION(PA_ENABLE_DEBUG_OUTPUT "Enable debug output for Portaudio" OFF)
-IF(PA_ENABLE_DEBUG_OUTPUT)
-  SET(PA_PRIVATE_COMPILE_DEFINITIONS ${PA_PRIVATE_COMPILE_DEFINITIONS} PA_ENABLE_DEBUG_OUTPUT)
-ENDIF()
-
-INCLUDE(TestBigEndian)
-TEST_BIG_ENDIAN(IS_BIG_ENDIAN)
-IF(IS_BIG_ENDIAN)
-  SET(PA_PRIVATE_COMPILE_DEFINITIONS ${PA_PRIVATE_COMPILE_DEFINITIONS} PA_BIG_ENDIAN)
-ELSE()
-  SET(PA_PRIVATE_COMPILE_DEFINITIONS ${PA_PRIVATE_COMPILE_DEFINITIONS} PA_LITTLE_ENDIAN)
-ENDIF()
-
-OPTION(PA_BUILD_STATIC "Build static library" ON)
-OPTION(PA_BUILD_SHARED "Build shared/dynamic library" ON)
-
-IF(MSVC)
-  OPTION(PA_LIBNAME_ADD_SUFFIX "Add suffix _static to static library name" ON)
-ELSE()
-  OPTION(PA_LIBNAME_ADD_SUFFIX "Add suffix _static to static library name" OFF)
-ENDIF()
-
-# MSVC: if PA_LIBNAME_ADD_SUFFIX is not used, and both static and shared libraries are
-# built, one, of import- and static libraries, will overwrite the other. In
-# embedded builds this is not an issue as they will only build the configuration
-# used in the host application.
-MARK_AS_ADVANCED(PA_LIBNAME_ADD_SUFFIX)
-IF(MSVC AND PA_BUILD_STATIC AND PA_BUILD_SHARED AND NOT PA_LIBNAME_ADD_SUFFIX)
-  MESSAGE(WARNING "Building both shared and static libraries, and avoiding the suffix _static will lead to a name conflict")
-  SET(PA_LIBNAME_ADD_SUFFIX ON CACHE BOOL "Forcing use of suffix _static to avoid name conflict between static and import library" FORCE)
-  MESSAGE(WARNING "PA_LIBNAME_ADD_SUFFIX was set to ON")
-ENDIF()
-
-SET(PA_TARGETS "")
-
-IF(PA_BUILD_SHARED)
-  LIST(APPEND PA_TARGETS portaudio)
-  ADD_LIBRARY(portaudio SHARED ${PA_INCLUDES} ${PA_COMMON_INCLUDES} ${PA_SOURCES} ${PA_NON_UNICODE_SOURCES} ${PA_EXTRA_SHARED_SOURCES})
-  SET_PROPERTY(TARGET portaudio APPEND_STRING PROPERTY COMPILE_DEFINITIONS ${PA_PRIVATE_COMPILE_DEFINITIONS})
-  TARGET_INCLUDE_DIRECTORIES(portaudio PRIVATE ${PA_PRIVATE_INCLUDE_PATHS})
-  TARGET_INCLUDE_DIRECTORIES(portaudio PUBLIC "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>" "$<INSTALL_INTERFACE:include>")
-  TARGET_LINK_LIBRARIES(portaudio ${PA_LIBRARY_DEPENDENCIES})
-ENDIF()
-
-IF(PA_BUILD_STATIC)
-  LIST(APPEND PA_TARGETS portaudio_static)
-  ADD_LIBRARY(portaudio_static STATIC ${PA_INCLUDES} ${PA_COMMON_INCLUDES} ${PA_SOURCES} ${PA_NON_UNICODE_SOURCES})
-  SET_PROPERTY(TARGET portaudio_static APPEND_STRING PROPERTY COMPILE_DEFINITIONS ${PA_PRIVATE_COMPILE_DEFINITIONS})
-  TARGET_INCLUDE_DIRECTORIES(portaudio_static PRIVATE ${PA_PRIVATE_INCLUDE_PATHS})
-  TARGET_INCLUDE_DIRECTORIES(portaudio_static PUBLIC "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>" "$<INSTALL_INTERFACE:include>")
-  TARGET_LINK_LIBRARIES(portaudio_static ${PA_LIBRARY_DEPENDENCIES})
-  IF(NOT PA_LIBNAME_ADD_SUFFIX)
-    SET_PROPERTY(TARGET portaudio_static PROPERTY OUTPUT_NAME portaudio)
-  ENDIF()
-ENDIF()
-
-IF(WIN32 AND MSVC)
-  OPTION(PA_CONFIG_LIB_OUTPUT_PATH "Make sure that output paths are kept neat" OFF)
-  IF(CMAKE_CL_64)
-    SET(TARGET_POSTFIX x64)
-    IF(PA_CONFIG_LIB_OUTPUT_PATH)
-      SET(LIBRARY_OUTPUT_PATH ${CMAKE_CURRENT_BINARY_DIR}/bin/x64)
-    ENDIF()
-  ELSE()
-    SET(TARGET_POSTFIX x86)
-    IF(PA_CONFIG_LIB_OUTPUT_PATH)
-      SET(LIBRARY_OUTPUT_PATH ${CMAKE_CURRENT_BINARY_DIR}/bin/Win32)
-    ENDIF()
-  ENDIF()
-  IF(PA_BUILD_SHARED)
-    IF(PA_LIBNAME_ADD_SUFFIX)
-      SET_TARGET_PROPERTIES(portaudio PROPERTIES OUTPUT_NAME portaudio_${TARGET_POSTFIX})
-    ELSE()
-      SET_TARGET_PROPERTIES(portaudio PROPERTIES OUTPUT_NAME portaudio)
-    ENDIF()
-  ENDIF()
-  IF(PA_BUILD_STATIC)
-    IF(PA_LIBNAME_ADD_SUFFIX)
-      SET_TARGET_PROPERTIES(portaudio_static PROPERTIES OUTPUT_NAME portaudio_static_${TARGET_POSTFIX})
-    ELSE()
-      SET_TARGET_PROPERTIES(portaudio_static PROPERTIES OUTPUT_NAME portaudio)
-    ENDIF()
-  ENDIF()
-ELSE()
-  IF(APPLE AND CMAKE_VERSION VERSION_GREATER 3.4.2)
-    OPTION(PA_OUTPUT_OSX_FRAMEWORK "Generate an OS X framework instead of the simple library" OFF)
-    IF(PA_OUTPUT_OSX_FRAMEWORK)
-      SET_TARGET_PROPERTIES(portaudio PROPERTIES
-        FRAMEWORK TRUE
-        MACOSX_FRAMEWORK_IDENTIFIER com.portaudio
-        FRAMEWORK_VERSION A
-        PUBLIC_HEADER "${PA_PUBLIC_INCLUDES}"
-        VERSION ${PA_SOVERSION}
-        SOVERSION ${PA_SOVERSION})
-    ENDIF()
-  ENDIF()
-ENDIF()
-
-# At least on Windows in embedded builds, portaudio's install target should likely
-# not be executed, as the library would usually already be installed as part of, and
-# by means of the host application.
-# The option below offers the option to avoid executing the portaudio install target
-# for cases in which the host-application executes install, but no independent install
-# of portaudio is wished.
-OPTION(PA_DISABLE_INSTALL "Disable targets install and uninstall (for embedded builds)" OFF)
-
-IF(NOT PA_OUTPUT_OSX_FRAMEWORK AND NOT PA_DISABLE_INSTALL)
-  INCLUDE(CMakePackageConfigHelpers)
-
-  CONFIGURE_PACKAGE_CONFIG_FILE(cmake_support/portaudioConfig.cmake.in ${CMAKE_BINARY_DIR}/cmake/portaudio/portaudioConfig.cmake
-    INSTALL_DESTINATION "lib/cmake/portaudio"
-    NO_CHECK_REQUIRED_COMPONENTS_MACRO)
-  WRITE_BASIC_PACKAGE_VERSION_FILE(${CMAKE_BINARY_DIR}/cmake/portaudio/portaudioConfigVersion.cmake
-    VERSION ${PA_VERSION}
-    COMPATIBILITY SameMajorVersion)
-  CONFIGURE_FILE(cmake_support/portaudio-2.0.pc.in ${CMAKE_CURRENT_BINARY_DIR}/portaudio-2.0.pc @ONLY)
-  INSTALL(FILES README.md DESTINATION share/doc/portaudio)
-  INSTALL(FILES LICENSE.txt DESTINATION share/doc/portaudio)
-  INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/portaudio-2.0.pc DESTINATION lib/pkgconfig)
-  INSTALL(FILES ${PA_PUBLIC_INCLUDES} DESTINATION include)
-  INSTALL(TARGETS ${PA_TARGETS}
-    EXPORT portaudio-targets
-    RUNTIME DESTINATION bin
-    LIBRARY DESTINATION lib
-    ARCHIVE DESTINATION lib)
-  INSTALL(EXPORT portaudio-targets FILE "portaudioTargets.cmake" DESTINATION "lib/cmake/portaudio")
-  EXPORT(TARGETS ${PA_TARGETS} FILE "${PROJECT_BINARY_DIR}/cmake/portaudio/portaudioTargets.cmake")
-  INSTALL(FILES "${CMAKE_BINARY_DIR}/cmake/portaudio/portaudioConfig.cmake"
-                "${CMAKE_BINARY_DIR}/cmake/portaudio/portaudioConfigVersion.cmake"
-    DESTINATION "lib/cmake/portaudio")
-
-  IF (NOT TARGET uninstall)
-    CONFIGURE_FILE(
-      "${CMAKE_CURRENT_SOURCE_DIR}/cmake_support/cmake_uninstall.cmake.in"
+    src/os/win/pa_win_coinitialize.c
+  )
+  target_include_directories(portaudio PRIVATE src/os/win)
+  set(PORTAUDIO_PUBLIC_HEADERS "${PORTAUDIO_PUBLIC_HEADERS}" include/pa_win_waveformat.h)
+  target_link_libraries(portaudio winmm)
+
+  if(MSVC)
+    target_sources(portaudio PRIVATE src/os/win/pa_x86_plain_converters.c)
+  else()
+    target_compile_definitions(portaudio PRIVATE _WIN32_WINNT=0x0501 WINVER=0x0501)
+  endif()
+
+  target_compile_definitions(portaudio PRIVATE _CRT_SECURE_NO_WARNINGS)
+
+  option(ASIO "Enable support for ASIO" OFF)
+  if(ASIO)
+    find_package(ASIO)
+    if(NOT ASIO_FOUND)
+      # The ASIO SDK license allows for downloading it from Steinberg and using it without charge,
+      # but it is not allowed to be redistributed.
+      if(NOT ASIO_SDK_ZIP_PATH)
+        set(ASIO_SDK_ZIP_PATH "${CMAKE_CURRENT_BINARY_DIR}/asiosdk.zip")
+      endif()
+      message(STATUS "Downloading ASIO SDK... ${ASIO_SDK_ZIP_PATH}")
+      file(DOWNLOAD "https://www.steinberg.net/asiosdk"
+        ${ASIO_SDK_ZIP_PATH}
+        STATUS ASIO_DOWNLOAD_STATUS
+        SHOW_PROGRESS)
+      if(NOT "${ASIO_DOWNLOAD_STATUS}" EQUAL 0)
+        list(GET "${ASIO_DOWNLOAD_STATUS}" 1 DOWNLOAD_ERROR)
+        message(FATAL_ERROR "Error downloading ASIO SDK: ${DOWNLOAD_ERROR}."
+          "Reconfigure CMake with -DASIO=OFF to build without ASIO.")
+      endif()
+      find_package(ASIO)
+      if(NOT ASIO_FOUND)
+        message(FATAL_ERROR "ASIO SDK not found. "
+          "Reconfigure CMake with -DASIO=OFF to build without ASIO.")
+      endif()
+    endif()
+  endif()
+  if(ASIO AND ASIO_FOUND)
+    target_link_libraries(portaudio ole32 uuid)
+    target_include_directories(portaudio PRIVATE "${ASIO_INCLUDE_DIRS}")
+    set(PORTAUDIO_PUBLIC_HEADERS "${PORTAUDIO_PUBLIC_HEADERS}" include/pa_asio.h)
+    target_compile_definitions(portaudio PRIVATE PA_USE_ASIO=1)
+    target_sources(portaudio PRIVATE
+      src/hostapi/asio/pa_asio.cpp
+      src/hostapi/asio/iasiothiscallresolver.cpp
+      "${ASIO_SOURCE_FILES}"
+    )
+  endif()
+
+  option(DIRECTSOUND "Enable support for DirectSound" ON)
+  if(DIRECTSOUND)
+    target_sources(portaudio PRIVATE
+      src/hostapi/dsound/pa_win_ds.c
+      src/hostapi/dsound/pa_win_ds_dynlink.c
+    )
+    target_include_directories(portaudio PRIVATE src/hostapi/dsound)
+    set(PORTAUDIO_PUBLIC_HEADERS "${PORTAUDIO_PUBLIC_HEADERS}" include/pa_win_ds.h)
+    target_compile_definitions(portaudio PRIVATE PA_USE_DS=1)
+    target_link_libraries(portaudio dsound)
+    if(NOT MINGW)
+      target_compile_definitions(portaudio PRIVATE PAWIN_USE_DIRECTSOUNDFULLDUPLEXCREATE)
+    endif()
+  endif()
+
+  option(WMME "Enable support for WMME" ON)
+  if(WMME)
+    target_sources(portaudio PRIVATE src/hostapi/wmme/pa_win_wmme.c)
+    set(PORTAUDIO_PUBLIC_HEADERS "${PORTAUDIO_PUBLIC_HEADERS}" include/pa_win_wmme.h)
+    target_compile_definitions(portaudio PRIVATE PA_USE_WMME=1)
+    target_link_libraries(portaudio ole32 uuid)
+  endif()
+
+  option(WASAPI "Enable support for WASAPI" ON)
+  if(WASAPI)
+    target_sources(portaudio PRIVATE src/hostapi/wasapi/pa_win_wasapi.c)
+    set(PORTAUDIO_PUBLIC_HEADERS "${PORTAUDIO_PUBLIC_HEADERS}" include/pa_win_wasapi.h)
+    target_compile_definitions(portaudio PRIVATE PA_USE_WASAPI=1)
+    target_link_libraries(portaudio ole32 uuid)
+  endif()
+
+  option(WDMKS "Enable support for WDMKS" ON)
+  if(WDMKS)
+    target_sources(portaudio PRIVATE
+      src/os/win/pa_win_wdmks_utils.c
+      src/hostapi/wdmks/pa_win_wdmks.c
+    )
+    set(PORTAUDIO_PUBLIC_HEADERS "${PORTAUDIO_PUBLIC_HEADERS}" include/pa_win_wdmks.h)
+    target_compile_definitions(portaudio PRIVATE PA_USE_WDMKS=1)
+    target_link_libraries(portaudio setupapi ole32 uuid)
+  endif()
+
+  option(WDMKS_DEVICE_INFO "Use WDM/KS API for device info" ON)
+  if(WDMKS_DEVICE_INFO)
+    target_compile_definitions(portaudio PRIVATE PAWIN_USE_WDMKS_DEVICE_INFO)
+  endif()
+elseif(UNIX)
+  target_sources(portaudio PRIVATE
+    src/os/unix/pa_unix_hostapis.c
+    src/os/unix/pa_unix_util.c
+  )
+  target_include_directories(portaudio PRIVATE src/os/unix)
+  target_link_libraries(portaudio m)
+
+  if(APPLE)
+    set(CMAKE_MACOSX_RPATH 1)
+    target_sources(portaudio PRIVATE
+      src/hostapi/coreaudio/pa_mac_core.c
+      src/hostapi/coreaudio/pa_mac_core_blocking.c
+      src/hostapi/coreaudio/pa_mac_core_utilities.c)
+    target_include_directories(portaudio PRIVATE src/hostapi/coreaudio)
+    set(PORTAUDIO_PUBLIC_HEADERS "${PORTAUDIO_PUBLIC_HEADERS}" include/pa_mac_core.h)
+
+    find_library(COREAUDIO_LIBRARY CoreAudio REQUIRED)
+    find_library(AUDIOTOOLBOX_LIBRARY AudioToolbox REQUIRED)
+    find_library(AUDIOUNIT_LIBRARY AudioUnit REQUIRED)
+    find_library(COREFOUNDATION_LIBRARY CoreFoundation REQUIRED)
+    find_library(CORESERVICES_LIBRARY CoreServices REQUIRED)
+    target_link_libraries(portaudio
+      ${COREAUDIO_LIBRARY}
+      ${AUDIOTOOLBOX_LIBRARY}
+      ${AUDIOUNIT_LIBRARY}
+      ${COREFOUNDATION_LIBRARY}
+      ${CORESERVICES_LIBRARY}
+    )
+    target_compile_definitions(portaudio PRIVATE PA_USE_COREAUDIO=1)
+  else()
+    find_package(ALSA)
+    cmake_dependent_option(ALSA "Enable support for ALSA" ON ALSA_FOUND OFF)
+    if(ALSA)
+      target_link_libraries(portaudio ALSA::ALSA)
+      target_sources(portaudio PRIVATE src/hostapi/alsa/pa_linux_alsa.c)
+      set(PORTAUDIO_PUBLIC_HEADERS "${PORTAUDIO_PUBLIC_HEADERS}" include/pa_linux_alsa.h)
+      target_compile_definitions(portaudio PRIVATE PA_USE_ALSA=1)
+    endif()
+
+    option(OSS "Enable support for OSS" OFF)
+    if(OSS)
+      # OSS has no library to link, only a header
+      find_path(OSS_INCLUDE_DIR
+        NAMES sys/soundcard.h
+        DOC "OSS include directory")
+      if(OSS_INCLUDE_DIR)
+        target_compile_definitions(portaudio PRIVATE HAVE_SYS_SOUNDCARD_H)
+      else()
+        find_path(OSS_INCLUDE_DIR
+          NAMES linux/soundcard.h
+          DOC "OSS include directory")
+        if(OSS_INCLUDE_DIR)
+          target_compile_definitions(portaudio PRIVATE HAVE_LINUX_SOUNDCARD_H)
+        else()
+          find_path(OSS_INCLUDE_DIR
+            NAMES machine/soundcard.h
+            DOC "OSS include directory")
+          target_compile_definitions(portaudio PRIVATE HAVE_MACHINE_SOUNDCARD_H)
+        endif()
+      endif()
+
+      mark_as_advanced(OSS_INCLUDE_DIR)
+      if(OSS_INCLUDE_DIR)
+        message(STATUS "Found OSS: ${OSS_INCLUDE_DIR}")
+        target_include_directories(portaudio PRIVATE "${OSS_INCLUDE_DIR}")
+        target_sources(portaudio PRIVATE src/hostapi/oss/pa_unix_oss.c)
+        target_compile_definitions(portaudio PRIVATE PA_USE_OSS=1)
+      else()
+        message(WARNING "OSS NOT found")
+      endif()
+    endif()
+  endif()
+endif()
+
+#
+# Installation
+#
+
+include(CMakePackageConfigHelpers)
+include(GNUInstallDirs)
+
+if(NOT CMAKE_FRAMEWORK)
+  install(FILES README.md DESTINATION "${CMAKE_INSTALL_DOCDIR}/portaudio")
+  install(FILES LICENSE.txt DESTINATION "${CMAKE_INSTALL_DOCDIR}/portaudio")
+
+  configure_file(cmake/portaudio-2.0.pc.in "${CMAKE_CURRENT_BINARY_DIR}/portaudio-2.0.pc" @ONLY)
+  install(FILES "${CMAKE_CURRENT_BINARY_DIR}/portaudio-2.0.pc"
+    DESTINATION "${CMAKE_INSTALL_LIBDIR}/pkgconfig")
+
+  configure_package_config_file(cmake/portaudioConfig.cmake.in
+    "${CMAKE_CURRENT_BINARY_DIR}/cmake/portaudio/portaudioConfig.cmake"
+    INSTALL_DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/portaudio"
+    NO_CHECK_REQUIRED_COMPONENTS_MACRO
+  )
+  write_basic_package_version_file(
+    "${CMAKE_CURRENT_BINARY_DIR}/cmake/portaudio/portaudioConfigVersion.cmake"
+    VERSION "${PORTAUDIO_VERSION}"
+    COMPATIBILITY SameMajorVersion
+  )
+  install(EXPORT portaudio-targets FILE "portaudioTargets.cmake"
+    DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/portaudio")
+  export(TARGETS portaudio
+    FILE "${CMAKE_CURRENT_BINARY_DIR}/cmake/portaudio/portaudioTargets.cmake")
+  install(FILES "${CMAKE_CURRENT_BINARY_DIR}/cmake/portaudio/portaudioConfig.cmake"
+                "${CMAKE_CURRENT_BINARY_DIR}/cmake/portaudio/portaudioConfigVersion.cmake"
+    DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/portaudio")
+
+  if(NOT TARGET uninstall)
+    configure_file(
+      "${CMAKE_CURRENT_SOURCE_DIR}/cmake/cmake_uninstall.cmake.in"
       "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"
       IMMEDIATE @ONLY)
-    ADD_CUSTOM_TARGET(uninstall
-      COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)
-  ENDIF()
-ENDIF()
-
-# Prepared for inclusion of test files
-OPTION(PA_BUILD_TESTS "Include test projects" OFF)
-IF(PA_BUILD_TESTS)
-  MACRO(ADD_TEST appl_name)
-    ADD_EXECUTABLE(${appl_name} "${appl_name}.c")
-    TARGET_LINK_LIBRARIES(${appl_name} portaudio_static)
-    TARGET_INCLUDE_DIRECTORIES(${appl_name} PRIVATE "${CMAKE_SOURCE_DIR}/src/common")
-    SET_TARGET_PROPERTIES(${appl_name}
+    add_custom_target(uninstall
+      COMMAND ${CMAKE_COMMAND} -P "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake")
+  endif()
+endif()
+
+set_target_properties(portaudio PROPERTIES
+  PUBLIC_HEADER "${PORTAUDIO_PUBLIC_HEADERS}"
+  MACOSX_FRAMEWORK_IDENTIFIER com.portaudio
+  FRAMEWORK_VERSION A
+  VERSION ${PROJECT_VERSION}
+  SOVERSION ${PROJECT_VERSION}
+  WINDOWS_EXPORT_ALL_SYMBOLS TRUE
+)
+install(TARGETS portaudio
+  EXPORT portaudio-targets
+  PUBLIC_HEADER DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}"
+  FRAMEWORK DESTINATION "${CMAKE_INSTALL_LIBDIR}"
+  LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}"
+  ARCHIVE DESTINATION "${CMAKE_INSTALL_LIBDIR}"
+  RUNTIME DESTINATION "${CMAKE_INSTALL_BINDIR}"
+)
+
+#
+# Subdirectories
+#
+
+option(BUILD_TESTING "Include test projects" OFF)
+if(BUILD_TESTING)
+  macro(add_test appl_name)
+    add_executable(${appl_name} "${appl_name}.c")
+    target_link_libraries(${appl_name} portaudio)
+    target_include_directories(${appl_name} PRIVATE "${CMAKE_SOURCE_DIR}/src/common")
+    set_target_properties(${appl_name}
         PROPERTIES
         FOLDER "Test"
     )
-  ENDMACRO(ADD_TEST)
+  endmacro()
 
-  SUBDIRS(test)
-  SUBDIRS(qa)
-ENDIF()
+  subdirs(test)
+  subdirs(qa)
+endif()
 
-# Prepared for inclusion of test files
-OPTION(PA_BUILD_EXAMPLES "Include example projects" OFF)
-IF(PA_BUILD_EXAMPLES)
-  SUBDIRS(examples)
-ENDIF()
+option(BUILD_EXAMPLES "Include example projects" OFF)
+if(BUILD_EXAMPLES)
+  subdirs(examples)
+endif()
diff --git a/cmake/FindASIO.cmake b/cmake/FindASIO.cmake
new file mode 100644
index 0000000..fd0fdf4
--- /dev/null
+++ b/cmake/FindASIO.cmake
@@ -0,0 +1,85 @@
+#[=======================================================================[.rst:
+FindASIO
+--------
+
+Finds the ASIO SDK by searching for the SDK ZIP in CMAKE_BINARY_DIR,
+CMAKE_SOURCE_DIR, and CMAKE_PREFIX_PATH. Alternatively, you may manually specify
+the path of the SDK ZIP with the ASIO_SDK_ZIP_PATH variable, which can be used
+for caching in CI scripts.
+
+If the ZIP is found, this module extracts it.
+The ZIP extraction is skipped if the unzipped SDK is found.
+
+This module exports targets for building applications which use ASIO drivers.
+If you want to build an ASIO driver, this may serve as a useful start but you
+will need to modify it.
+
+This module does not provide any library targets to link to.
+
+Result Variables
+^^^^^^^^^^^^^^^^
+
+This will define the following variables:
+
+``ASIO_FOUND``
+  True if the ASIO SDK was found.
+``ASIO_INCLUDE_DIRS``
+  Include directories needed to use the ASIO SDK
+``ASIO_SOURCE_FILES``
+  Source code files that need to be built to use the SDK
+
+Cache Variables
+^^^^^^^^^^^^^^^
+
+The following cache variables may also be set:
+
+``ASIO_ROOT``
+  The directory containing ``common/asio.h``.
+
+#]=======================================================================]
+
+if(NOT WIN32)
+  message(FATAL_ERROR "ASIO is only supported on Windows")
+endif()
+
+file(GLOB_RECURSE HEADER_FILE "${CMAKE_BINARY_DIR}/*/asio.h")
+if(NOT EXISTS "${HEADER_FILE}")
+  file(GLOB results
+    "${ASIO_SDK_ZIP_PATH}"
+    "${CMAKE_PREFIX_PATH}/asiosdk*.zip"
+    "${CMAKE_CURRENT_BINARY_DIR}/asiosdk*.zip"
+    "${CMAKE_CURRENT_SOURCE_DIR}/asiosdk*.zip"
+    # The old build systems used to look for the ASIO SDK
+    # in the same parent directory as the source code repository.
+    "${CMAKE_CURRENT_SOURCE_DIR}/../asiosdk*.zip")
+  foreach(f ${results})
+    if(EXISTS "${f}")
+      message(STATUS "Extracting ASIO SDK ZIP archive: ${f}")
+      file(ARCHIVE_EXTRACT INPUT "${f}")
+    endif()
+  endforeach()
+endif()
+
+file(GLOB_RECURSE HEADER_FILE "${CMAKE_BINARY_DIR}/*/asio.h")
+get_filename_component(HEADER_DIR "${HEADER_FILE}" DIRECTORY)
+get_filename_component(ASIO_ROOT "${HEADER_DIR}" DIRECTORY)
+
+if(ASIO_ROOT)
+  set(ASIO_FOUND TRUE)
+  message(STATUS "Found ASIO SDK: ${ASIO_ROOT}")
+
+  set(ASIO_INCLUDE_DIRS
+    "${ASIO_ROOT}/common"
+    "${ASIO_ROOT}/host"
+    "${ASIO_ROOT}/host/pc"
+  )
+
+  set(ASIO_SOURCE_FILES
+    "${ASIO_ROOT}/common/asio.cpp"
+    "${ASIO_ROOT}/host/asiodrivers.cpp"
+    "${ASIO_ROOT}/host/pc/asiolist.cpp"
+  )
+else()
+  message(STATUS "ASIO SDK NOT found")
+endif()
+
diff --git a/cmake/FindJACK.cmake b/cmake/FindJACK.cmake
new file mode 100644
index 0000000..58ade0d
--- /dev/null
+++ b/cmake/FindJACK.cmake
@@ -0,0 +1,70 @@
+#[=======================================================================[.rst:
+FindJACK
+--------
+
+Finds the JACK Audio Connection Kit library.
+
+Imported Targets
+^^^^^^^^^^^^^^^^
+
+This module provides the following imported targets, if found:
+
+``JACK::jack``
+  The JACK library
+
+Result Variables
+^^^^^^^^^^^^^^^^
+
+This will define the following variables:
+
+``JACK_FOUND``
+  True if the system has the JACK library.
+``JACK_INCLUDE_DIRS``
+  Include directories needed to use JACK.
+``JACK_LIBRARIES``
+  Libraries needed to link to JACK.
+
+Cache Variables
+^^^^^^^^^^^^^^^
+
+The following cache variables may also be set:
+
+``JACK_INCLUDE_DIR``
+  The directory containing ``jack.h``.
+``JACK_LIBRARY``
+  The path to the JACK library.
+
+#]=======================================================================]
+
+find_path(JACK_INCLUDE_DIR
+  NAMES jack/jack.h
+  DOC "JACK include directory")
+mark_as_advanced(JACK_INCLUDE_DIR)
+
+find_library(JACK_LIBRARY
+  NAMES jack
+  DOC "JACK library"
+)
+mark_as_advanced(JACK_LIBRARY)
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(
+  JACK
+  DEFAULT_MSG
+  JACK_LIBRARY
+  JACK_INCLUDE_DIR
+)
+
+if(JACK_FOUND)
+  set(JACK_LIBRARIES "${JACK_LIBRARY}")
+  set(JACK_INCLUDE_DIRS "${JACK_INCLUDE_DIR}")
+
+  if(NOT TARGET JACK::jack)
+    add_library(JACK::jack UNKNOWN IMPORTED)
+    set_target_properties(JACK::jack
+      PROPERTIES
+        IMPORTED_LOCATION "${JACK_LIBRARY}"
+        INTERFACE_INCLUDE_DIRECTORIES "${JACK_INCLUDE_DIR}"
+    )
+  endif()
+endif()
diff --git a/cmake_support/cmake_uninstall.cmake.in b/cmake/cmake_uninstall.cmake.in
similarity index 100%
rename from cmake_support/cmake_uninstall.cmake.in
rename to cmake/cmake_uninstall.cmake.in
diff --git a/cmake_support/portaudio-2.0.pc.in b/cmake/portaudio-2.0.pc.in
similarity index 100%
rename from cmake_support/portaudio-2.0.pc.in
rename to cmake/portaudio-2.0.pc.in
diff --git a/cmake_support/portaudioConfig.cmake.in b/cmake/portaudioConfig.cmake.in
similarity index 100%
rename from cmake_support/portaudioConfig.cmake.in
rename to cmake/portaudioConfig.cmake.in
diff --git a/i686-w64-mingw32.cmake b/cmake/toolchains/i686-w64-mingw32.cmake
similarity index 89%
rename from i686-w64-mingw32.cmake
rename to cmake/toolchains/i686-w64-mingw32.cmake
index c3331b6..558c0bd 100644
--- a/i686-w64-mingw32.cmake
+++ b/cmake/toolchains/i686-w64-mingw32.cmake
@@ -1,6 +1,6 @@
 # CMake Toolchain file for cross-compiling PortAudio to i686-w64-mingw32
 # Inspired from: https://gitlab.kitware.com/cmake/community/-/wikis/doc/cmake/cross_compiling/Mingw
-# Example usage: $ cmake -DCMAKE_TOOLCHAIN_FILE=i686-w64-mingw32.cmake .
+# Example usage: $ cmake -DCMAKE_TOOLCHAIN_FILE=cmake/i686-w64-mingw32.cmake .
 # i686-w64-mingw32 needs to be installed for this to work. On Debian-based
 # distributions the package is typically named `mingw-w64`.
 
diff --git a/cmake_support/FindASIOSDK.cmake b/cmake_support/FindASIOSDK.cmake
deleted file mode 100644
index 55ad33d..0000000
--- a/cmake_support/FindASIOSDK.cmake
+++ /dev/null
@@ -1,41 +0,0 @@
-# $Id: $
-#
-# - Try to find the ASIO SDK
-# Once done this will define
-#
-#  ASIOSDK_FOUND - system has ASIO SDK
-#  ASIOSDK_ROOT_DIR - path to the ASIO SDK base directory
-#  ASIOSDK_INCLUDE_DIR - the ASIO SDK include directory
-
-if(WIN32)
-else(WIN32)
-  message(FATAL_ERROR "FindASIOSDK.cmake: Unsupported platform ${CMAKE_SYSTEM_NAME}" )
-endif(WIN32)
-
-file(GLOB results "${CMAKE_CURRENT_SOURCE_DIR}/../as*")
-foreach(f ${results})
-  if(IS_DIRECTORY ${f})
-    set(ASIOSDK_PATH_HINT ${ASIOSDK_PATH_HINT} ${f})
-  endif()
-endforeach()
-
-find_path(ASIOSDK_ROOT_DIR
-  common/asio.h
-  HINTS
-    ${ASIOSDK_PATH_HINT}
-)
-
-find_path(ASIOSDK_INCLUDE_DIR
-  asio.h
-  PATHS
-    ${ASIOSDK_ROOT_DIR}/common 
-)  
-
-# handle the QUIETLY and REQUIRED arguments and set ASIOSDK_FOUND to TRUE if 
-# all listed variables are TRUE
-INCLUDE(FindPackageHandleStandardArgs)
-FIND_PACKAGE_HANDLE_STANDARD_ARGS(ASIOSDK DEFAULT_MSG ASIOSDK_ROOT_DIR ASIOSDK_INCLUDE_DIR)
-
-MARK_AS_ADVANCED(
-    ASIOSDK_ROOT_DIR ASIOSDK_INCLUDE_DIR
-)
diff --git a/cmake_support/FindJack.cmake b/cmake_support/FindJack.cmake
deleted file mode 100644
index 96e0b50..0000000
--- a/cmake_support/FindJack.cmake
+++ /dev/null
@@ -1,41 +0,0 @@
-# - Try to find jack
-# Once done this will define
-#  JACK_FOUND - System has jack
-#  JACK_INCLUDE_DIRS - The jack include directories
-#  JACK_LIBRARIES - The libraries needed to use jack
-#  JACK_DEFINITIONS - Compiler switches required for using jack
-
-if (JACK_LIBRARIES AND JACK_INCLUDE_DIRS)
-
-	# in cache already
-	set(JACK_FOUND TRUE)
-
-else (JACK_LIBRARIES AND JACK_INCLUDE_DIRS)
-
-	set(JACK_DEFINITIONS "")
-
-	# Look for pkg-config and use it (if available) to find package
-	find_package(PkgConfig QUIET)
-	if (PKG_CONFIG_FOUND)
-		pkg_search_module(JACK QUIET jack)
-	endif (PKG_CONFIG_FOUND)
-
-	if (NOT JACK_FOUND)
-
-		find_path(JACK_INCLUDE_DIR jack/jack.h HINTS ${JACK_INCLUDEDIR} ${JACK_INCLUDE_DIRS} PATH_SUFFIXES jack)
-		find_library(JACK_LIBRARY NAMES jack HINTS ${JACK_LIBDIR} ${JACK_LIBRARY_DIRS})
-
-		set(JACK_LIBRARIES    ${JACK_LIBRARY})
-		set(JACK_INCLUDE_DIRS ${JACK_INCLUDE_DIR})
-
-		include(FindPackageHandleStandardArgs)
-
-		# Set JACK_FOUND if the library and include paths were found
-		find_package_handle_standard_args(jack DEFAULT_MSG JACK_LIBRARY JACK_INCLUDE_DIR)
-
-		# Don't show include/library paths in cmake GUI
-		mark_as_advanced(JACK_INCLUDE_DIR JACK_LIBRARY)
-
-	endif (NOT JACK_FOUND)
-
-endif (JACK_LIBRARIES AND JACK_INCLUDE_DIRS)
diff --git a/cmake_support/options_cmake.h.in b/cmake_support/options_cmake.h.in
deleted file mode 100644
index cd07605..0000000
--- a/cmake_support/options_cmake.h.in
+++ /dev/null
@@ -1,31 +0,0 @@
-/* $Id: $
-
-   !!! @GENERATED_MESSAGE@ !!!
-
-   Header file configured by CMake to convert CMake options/vars to macros. It is done this way because if set via
-   preprocessor options, MSVC f.i. has no way of knowing when an option (or var) changes as there is no dependency chain.
-   
-   The generated "options_cmake.h" should be included like so:
-   
-   #ifdef PORTAUDIO_CMAKE_GENERATED
-   #include "options_cmake.h"
-   #endif
-   
-   so that non-CMake build environments are left intact.
-   
-   Source template: cmake_support/options_cmake.h.in
-*/
-
-#ifdef _WIN32
-#if defined(PA_USE_ASIO) || defined(PA_USE_DS) || defined(PA_USE_WMME) || defined(PA_USE_WASAPI) || defined(PA_USE_WDMKS)
-#error "This header needs to be included before pa_hostapi.h!!"
-#endif
-
-#cmakedefine01 PA_USE_ASIO
-#cmakedefine01 PA_USE_DS
-#cmakedefine01 PA_USE_WMME
-#cmakedefine01 PA_USE_WASAPI
-#cmakedefine01 PA_USE_WDMKS
-#else
-#error "Platform currently not supported by CMake script"
-#endif
diff --git a/cmake_support/template_portaudio.def b/cmake_support/template_portaudio.def
deleted file mode 100644
index b5d56f1..0000000
--- a/cmake_support/template_portaudio.def
+++ /dev/null
@@ -1,62 +0,0 @@
-; $Id: $
-;
-; !!! @GENERATED_MESSAGE@ !!!
-EXPORTS
-
-;
-Pa_GetVersion                       @1
-Pa_GetVersionText                   @2
-Pa_GetErrorText                     @3                 
-Pa_Initialize                       @4
-Pa_Terminate                        @5
-Pa_GetHostApiCount                  @6
-Pa_GetDefaultHostApi                @7
-Pa_GetHostApiInfo                   @8
-Pa_HostApiTypeIdToHostApiIndex      @9
-Pa_HostApiDeviceIndexToDeviceIndex  @10
-Pa_GetLastHostErrorInfo             @11
-Pa_GetDeviceCount                   @12
-Pa_GetDefaultInputDevice            @13
-Pa_GetDefaultOutputDevice           @14
-Pa_GetDeviceInfo                    @15
-Pa_IsFormatSupported                @16
-Pa_OpenStream                       @17
-Pa_OpenDefaultStream                @18
-Pa_CloseStream                      @19
-Pa_SetStreamFinishedCallback        @20
-Pa_StartStream                      @21
-Pa_StopStream                       @22
-Pa_AbortStream                      @23
-Pa_IsStreamStopped                  @24
-Pa_IsStreamActive                   @25
-Pa_GetStreamInfo                    @26
-Pa_GetStreamTime                    @27
-Pa_GetStreamCpuLoad                 @28
-Pa_ReadStream                       @29
-Pa_WriteStream                      @30
-Pa_GetStreamReadAvailable           @31
-Pa_GetStreamWriteAvailable          @32
-Pa_GetSampleSize                    @33
-Pa_Sleep                            @34
-Pa_GetVersionInfo                   @35
-@DEF_EXCLUDE_ASIO_SYMBOLS@PaAsio_GetAvailableBufferSizes      @50
-@DEF_EXCLUDE_ASIO_SYMBOLS@PaAsio_ShowControlPanel             @51
-@DEF_EXCLUDE_X86_PLAIN_CONVERTERS@PaUtil_InitializeX86PlainConverters @52
-@DEF_EXCLUDE_ASIO_SYMBOLS@PaAsio_GetInputChannelName          @53
-@DEF_EXCLUDE_ASIO_SYMBOLS@PaAsio_GetOutputChannelName         @54
-PaUtil_SetDebugPrintFunction        @55
-@DEF_EXCLUDE_WASAPI_SYMBOLS@PaWasapi_GetAudioClient             @56
-@DEF_EXCLUDE_WASAPI_SYMBOLS@PaWasapi_UpdateDeviceList           @57
-@DEF_EXCLUDE_WASAPI_SYMBOLS@PaWasapi_GetDeviceCurrentFormat     @58
-@DEF_EXCLUDE_WASAPI_SYMBOLS@PaWasapi_GetDeviceDefaultFormat     @59
-@DEF_EXCLUDE_WASAPI_SYMBOLS@PaWasapi_GetDeviceMixFormat         @60
-@DEF_EXCLUDE_WASAPI_SYMBOLS@PaWasapi_GetDeviceRole              @61
-@DEF_EXCLUDE_WASAPI_SYMBOLS@PaWasapi_ThreadPriorityBoost        @62
-@DEF_EXCLUDE_WASAPI_SYMBOLS@PaWasapi_ThreadPriorityRevert       @63
-@DEF_EXCLUDE_WASAPI_SYMBOLS@PaWasapi_GetFramesPerHostBuffer     @64
-@DEF_EXCLUDE_WASAPI_SYMBOLS@PaWasapi_GetJackCount               @65
-@DEF_EXCLUDE_WASAPI_SYMBOLS@PaWasapi_GetJackDescription         @66
-@DEF_EXCLUDE_WASAPI_SYMBOLS@PaWasapi_SetStreamStateHandler      @68
-@DEF_EXCLUDE_WASAPI_SYMBOLS@PaWasapiWinrt_SetDefaultDeviceId    @67
-@DEF_EXCLUDE_WASAPI_SYMBOLS@PaWasapiWinrt_PopulateDeviceList    @69
-@DEF_EXCLUDE_WASAPI_SYMBOLS@PaWasapi_GetIMMDevice               @70
diff --git a/examples/CMakeLists.txt b/examples/CMakeLists.txt
index a4a9095..f1b34cf 100644
--- a/examples/CMakeLists.txt
+++ b/examples/CMakeLists.txt
@@ -1,40 +1,40 @@
 # Example projects
 
-MACRO(ADD_EXAMPLE appl_name)
-  ADD_EXECUTABLE(${appl_name} "${appl_name}.c")
-  TARGET_LINK_LIBRARIES(${appl_name} portaudio_static)
-  TARGET_INCLUDE_DIRECTORIES(${appl_name} PRIVATE ../src/common)
-  SET_TARGET_PROPERTIES(${appl_name} PROPERTIES FOLDER "Examples C")
-  IF(WIN32)
-    SET_PROPERTY(TARGET ${appl_name} APPEND_STRING PROPERTY COMPILE_DEFINITIONS _CRT_SECURE_NO_WARNINGS)
-  ENDIF()
-ENDMACRO(ADD_EXAMPLE)
+macro(add_example appl_name)
+  add_executable(${appl_name} "${appl_name}.c")
+  target_link_libraries(${appl_name} portaudio)
+  target_include_directories(${appl_name} PRIVATE ../src/common)
+  set_target_properties(${appl_name} PROPERTIES FOLDER "Examples C")
+  if(WIN32)
+    set_property(TARGET ${appl_name} APPEND_STRING PROPERTY COMPILE_DEFINITIONS _CRT_SECURE_NO_WARNINGS)
+  endif()
+endmacro()
 
-MACRO(ADD_EXAMPLE_CPP appl_name)
-  ADD_EXECUTABLE(${appl_name} "${appl_name}.cpp")
-  TARGET_LINK_LIBRARIES(${appl_name} portaudio_static)
-  SET_TARGET_PROPERTIES(${appl_name} PROPERTIES FOLDER "Examples C++")
-  IF(WIN32)
-    SET_PROPERTY(TARGET ${appl_name} APPEND_STRING PROPERTY COMPILE_DEFINITIONS _CRT_SECURE_NO_WARNINGS)
-  ENDIF()
-ENDMACRO(ADD_EXAMPLE_CPP)
+macro(add_example_cpp appl_name)
+  add_executable(${appl_name} "${appl_name}.cpp")
+  target_link_libraries(${appl_name} portaudio)
+  set_target_properties(${appl_name} PROPERTIES FOLDER "Examples C++")
+  if(WIN32)
+    set_property(TARGET ${appl_name} APPEND_STRING PROPERTY COMPILE_DEFINITIONS _CRT_SECURE_NO_WARNINGS)
+  endif()
+endmacro()
 
-ADD_EXAMPLE(pa_devs)
-ADD_EXAMPLE(pa_fuzz)
-IF(PA_USE_ASIO AND WIN32)
-  ADD_EXAMPLE(paex_mono_asio_channel_select)
-ENDIF()
-ADD_EXAMPLE(paex_ocean_shore)
-ADD_EXAMPLE(paex_pink)
-ADD_EXAMPLE(paex_read_write_wire)
-ADD_EXAMPLE(paex_record)
-ADD_EXAMPLE(paex_record_file)
-ADD_EXAMPLE(paex_saw)
-ADD_EXAMPLE(paex_sine)
-ADD_EXAMPLE_CPP(paex_sine_c++)
-IF(PA_USE_WMME AND WIN32)
-  ADD_EXAMPLE(paex_wmme_ac3)
-  ADD_EXAMPLE(paex_wmme_surround)
-ENDIF()
-ADD_EXAMPLE(paex_write_sine)
-ADD_EXAMPLE(paex_write_sine_nonint)
+add_example(pa_devs)
+add_example(pa_fuzz)
+if(ASIO AND WIN32)
+  add_example(paex_mono_asio_channel_select)
+endif()
+add_example(paex_ocean_shore)
+add_example(paex_pink)
+add_example(paex_read_write_wire)
+add_example(paex_record)
+add_example(paex_record_file)
+add_example(paex_saw)
+add_example(paex_sine)
+add_example_cpp(paex_sine_c++)
+if(MME AND WIN32)
+  add_example(paex_wmme_ac3)
+  add_example(paex_wmme_surround)
+endif()
+add_example(paex_write_sine)
+add_example(paex_write_sine_nonint)
diff --git a/qa/CMakeLists.txt b/qa/CMakeLists.txt
index 26c0610..6577c98 100644
--- a/qa/CMakeLists.txt
+++ b/qa/CMakeLists.txt
@@ -1,5 +1,5 @@
-ADD_TEST(paqa_devs)
-ADD_TEST(paqa_errs)
-ADD_TEST(paqa_latency)
+add_test(paqa_devs)
+add_test(paqa_errs)
+add_test(paqa_latency)
 
-SUBDIRS(loopback)
+subdirs(loopback)
diff --git a/qa/loopback/CMakeLists.txt b/qa/loopback/CMakeLists.txt
index d58caa3..67b76e8 100644
--- a/qa/loopback/CMakeLists.txt
+++ b/qa/loopback/CMakeLists.txt
@@ -1,4 +1,4 @@
-ADD_EXECUTABLE(paloopback
+add_executable(paloopback
     src/audio_analyzer.c
     src/biquad_filter.c
     src/paqa.c
@@ -6,5 +6,5 @@ ADD_EXECUTABLE(paloopback
     src/test_audio_analyzer.c
     src/write_wav.c
 )
-TARGET_INCLUDE_DIRECTORIES(paloopback PRIVATE ..)
-TARGET_LINK_LIBRARIES(paloopback portaudio)
+target_include_directories(paloopback PRIVATE ..)
+target_link_libraries(paloopback portaudio)
diff --git a/test/CMakeLists.txt b/test/CMakeLists.txt
index 9c8054b..f514b2d 100644
--- a/test/CMakeLists.txt
+++ b/test/CMakeLists.txt
@@ -1,55 +1,55 @@
 # Test projects
 # Use the macro to add test projects
 
-ADD_TEST(pa_minlat)
-ADD_TEST(patest1)
-ADD_TEST(patest_buffer)
-ADD_TEST(patest_callbackstop)
-ADD_TEST(patest_clip)
-ADD_TEST(patest_converters)
-ADD_TEST(patest_dither)
-IF(PA_USE_DS)
-    ADD_TEST(patest_dsound_find_best_latency_params)
-    ADD_TEST(patest_dsound_low_level_latency_params)
-    ADD_TEST(patest_dsound_surround)
-ENDIF()
-ADD_TEST(patest_hang)
-ADD_TEST(patest_in_overflow)
-IF(PA_USE_WASAPI)
-    ADD_TEST(patest_jack_wasapi)
-ENDIF()
-ADD_TEST(patest_latency)
-ADD_TEST(patest_leftright)
-ADD_TEST(patest_longsine)
-ADD_TEST(patest_many)
-ADD_TEST(patest_maxsines)
-ADD_TEST(patest_mono)
-ADD_TEST(patest_multi_sine)
-ADD_TEST(patest_out_underflow)
-ADD_TEST(patest_prime)
-ADD_TEST(patest_read_record)
-ADD_TEST(patest_ringmix)
-ADD_TEST(patest_sine8)
-ADD_TEST(patest_sine_channelmaps)
-ADD_TEST(patest_sine_formats)
-ADD_TEST(patest_sine_srate)
-ADD_TEST(patest_sine_time)
-ADD_TEST(patest_start_stop)
-ADD_TEST(patest_stop)
-ADD_TEST(patest_stop_playout)
-ADD_TEST(patest_suggested_vs_streaminfo_latency)
-ADD_TEST(patest_sync)
-ADD_TEST(patest_timing)
-ADD_TEST(patest_toomanysines)
-ADD_TEST(patest_two_rates)
-ADD_TEST(patest_underflow)
-ADD_TEST(patest_unplug)
-ADD_TEST(patest_wire)
-IF(PA_USE_WMME)
-    ADD_TEST(patest_wmme_find_best_latency_params)
-    ADD_TEST(patest_wmme_low_level_latency_params)
-ENDIF()
-ADD_TEST(patest_write_stop)
-IF(UNIX)
-    ADD_TEST(patest_write_stop_hang_illegal)
-ENDIF()
+add_test(pa_minlat)
+add_test(patest1)
+add_test(patest_buffer)
+add_test(patest_callbackstop)
+add_test(patest_clip)
+add_test(patest_converters)
+add_test(patest_dither)
+if(DIRECTSOUND)
+    add_test(patest_dsound_find_best_latency_params)
+    add_test(patest_dsound_low_level_latency_params)
+    add_test(patest_dsound_surround)
+endif()
+add_test(patest_hang)
+add_test(patest_in_overflow)
+if(WASAPI)
+    add_test(patest_jack_wasapi)
+endif()
+add_test(patest_latency)
+add_test(patest_leftright)
+add_test(patest_longsine)
+add_test(patest_many)
+add_test(patest_maxsines)
+add_test(patest_mono)
+add_test(patest_multi_sine)
+add_test(patest_out_underflow)
+add_test(patest_prime)
+add_test(patest_read_record)
+add_test(patest_ringmix)
+add_test(patest_sine8)
+add_test(patest_sine_channelmaps)
+add_test(patest_sine_formats)
+add_test(patest_sine_srate)
+add_test(patest_sine_time)
+add_test(patest_start_stop)
+add_test(patest_stop)
+add_test(patest_stop_playout)
+add_test(patest_suggested_vs_streaminfo_latency)
+add_test(patest_sync)
+add_test(patest_timing)
+add_test(patest_toomanysines)
+add_test(patest_two_rates)
+add_test(patest_underflow)
+add_test(patest_unplug)
+add_test(patest_wire)
+if(WMME)
+    add_test(patest_wmme_find_best_latency_params)
+    add_test(patest_wmme_low_level_latency_params)
+endif()
+add_test(patest_write_stop)
+if(UNIX)
+    add_test(patest_write_stop_hang_illegal)
+endif()
